# -*- coding: utf-8 -*-
"""insta_with_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PfOKy8SguDkP8-dCXWby_RWuKIuHswul
"""

pip install instagram_private_api pandas cryptography

from instagram_private_api import Client
import pandas as pd
from datetime import datetime
import time
import logging
import json
import getpass
import os
from typing import Dict, List, Optional
from pathlib import Path
import base64
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class CredentialManager:
    def __init__(self):
        self.credentials_file = Path('instagram_credentials.enc')
        self.salt_file = Path('salt.key')

    def _generate_key(self, password: str) -> bytes:
        """Generate encryption key from password"""
        if not self.salt_file.exists():
            salt = os.urandom(16)
            self.salt_file.write_bytes(salt)
        else:
            salt = self.salt_file.read_bytes()

        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=salt,
            iterations=100000,
        )
        return base64.urlsafe_b64encode(kdf.derive(password.encode()))

    def save_credentials(self, username: str, password: str, master_password: str):
        """Encrypt and save credentials"""
        key = self._generate_key(master_password)
        f = Fernet(key)
        credentials = {
            'username': username,
            'password': password
        }
        encrypted_data = f.encrypt(json.dumps(credentials).encode())
        self.credentials_file.write_bytes(encrypted_data)

    def load_credentials(self, master_password: str) -> Dict[str, str]:
        """Load and decrypt credentials"""
        if not self.credentials_file.exists():
            return {}

        try:
            key = self._generate_key(master_password)
            f = Fernet(key)
            encrypted_data = self.credentials_file.read_bytes()
            decrypted_data = f.decrypt(encrypted_data)
            return json.loads(decrypted_data.decode())
        except Exception:
            return {}

class InstagramAnalyticsBot:
    def __init__(self, threshold_views: int = 10000):
        """
        Initialize Instagram bot with view threshold

        Args:
            threshold_views: Minimum view count to track
        """
        self.threshold_views = threshold_views
        self.logger = self._setup_logging()
        self.credential_manager = CredentialManager()
        self.api = None

    def authenticate(self):
        """Handle authentication with stored or new credentials"""
        while True:
            print("\n=== Instagram Analytics Bot ===")
            print("1. Use existing credentials")
            print("2. Enter new credentials")
            choice = input("Enter your choice (1/2): ")

            if choice == "1":
                master_password = getpass.getpass("Enter master password: ")
                credentials = self.credential_manager.load_credentials(master_password)

                if not credentials:
                    print("No valid credentials found or incorrect master password.")
                    continue

                try:
                    self.api = Client(credentials['username'], credentials['password'])
                    print("Successfully authenticated!")
                    break
                except Exception as e:
                    print(f"Authentication failed: {str(e)}")
                    continue

            elif choice == "2":
                username = input("Enter Instagram API username: ")
                password = getpass.getpass("Enter Instagram API password: ")
                master_password = getpass.getpass("Create a master password for encrypting credentials: ")

                try:
                    self.api = Client(username, password)
                    self.credential_manager.save_credentials(username, password, master_password)
                    print("Successfully authenticated and saved credentials!")
                    break
                except Exception as e:
                    print(f"Authentication failed: {str(e)}")
                    continue

    def _setup_logging(self) -> logging.Logger:
        """Configure logging for the bot"""
        logger = logging.getLogger('instagram_bot')
        logger.setLevel(logging.INFO)
        handler = logging.FileHandler('instagram_bot.log')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)
        return logger

    def get_user_info(self, username: str) -> Dict:
        """
        Fetch user information using their username

        Args:
            username: Instagram username to analyze

        Returns:
            Dict containing user information
        """
        try:
            user_info = self.api.username_info(username)
            return user_info['user']
        except Exception as e:
            self.logger.error(f"Error fetching user info for {username}: {str(e)}")
            return {}

    def analyze_media(self, username: str, max_posts: int = 50) -> pd.DataFrame:
        """
        Analyze recent media posts from a user

        Args:
            username: Instagram username to analyze
            max_posts: Maximum number of posts to analyze

        Returns:
            DataFrame with post analytics
        """
        try:
            user_id = self.get_user_info(username)['pk']
            media_items = []

            feed = self.api.user_feed(user_id)
            items = feed.get('items', [])

            for item in items[:max_posts]:
                if item.get('view_count', 0) >= self.threshold_views:
                    media_items.append({
                        'post_id': item['id'],
                        'timestamp': datetime.fromtimestamp(item['taken_at']),
                        'type': item['media_type'],
                        'view_count': item.get('view_count', 0),
                        'like_count': item.get('like_count', 0),
                        'comment_count': item.get('comment_count', 0),
                        'caption': item.get('caption', {}).get('text', '') if item.get('caption') else ''
                    })

            return pd.DataFrame(media_items)

        except Exception as e:
            self.logger.error(f"Error analyzing media for {username}: {str(e)}")
            return pd.DataFrame()

    def store_data(self, data: pd.DataFrame, filename: str):
        """
        Store analyzed data to CSV

        Args:
            data: DataFrame containing analysis results
            filename: Output filename
        """
        try:
            data.to_csv(filename, index=False)
            self.logger.info(f"Successfully stored data to {filename}")
        except Exception as e:
            self.logger.error(f"Error storing data: {str(e)}")

    def run_analysis(self, output_file: str = 'instagram_analysis.csv'):
        """
        Run complete analysis pipeline for multiple users

        Args:
            output_file: Output CSV filename
        """
        usernames = []
        print("\nEnter Instagram usernames to analyze (press Enter twice to finish):")

        while True:
            username = input("Enter username (or press Enter to finish): ").strip()
            if not username:
                if usernames:
                    break
                print("Please enter at least one username.")
                continue
            usernames.append(username)

        all_data = []

        for username in usernames:
            print(f"\nAnalyzing account: {username}")
            user_data = self.analyze_media(username)

            if not user_data.empty:
                user_data['username'] = username
                all_data.append(user_data)
                print(f"Successfully analyzed {len(user_data)} posts from {username}")
            else:
                print(f"No qualifying posts found for {username}")

            # Respect rate limits
            time.sleep(2)

        if all_data:
            final_data = pd.concat(all_data, ignore_index=True)
            self.store_data(final_data, output_file)
            print(f"\nAnalysis complete! Results saved to {output_file}")
        else:
            print("\nNo data collected during analysis")

def main():
    try:
        # Initialize bot
        bot = InstagramAnalyticsBot()

        # Handle authentication
        bot.authenticate()

        # Run analysis
        bot.run_analysis()

    except KeyboardInterrupt:
        print("\nOperation cancelled by user.")
    except Exception as e:
        print(f"\nBot execution failed: {str(e)}")

if __name__ == "__main__":
    main()